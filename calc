#!/usr/bin/env sh
## Calculates the result of performing a specified mathematical calculation.
#
# Somewhat irrelevant notes:
#
#  - 355/113 gives the value of pi accurate to 6 digits after the decimal
#    point
#     - 22/7 is accurate to 2 digits after the decimal point
#  - 239/169 gives the value of the square root of 2 accurate to 4 digits
#    after the decimal point
#     - 19601/13860 is accurate to 8 digits after the decimal point
#
# Source for all of the above: http://wilsonminesco.com/16bitMathTables/
#
# Copyright (C) 2011 (or even earlier) by James MacKay
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#set -x

PROG="$(basename "$0")"
DEFAULT_SCALE=2


if [ $# -eq 0 ]
then
    cat >&2 << +++EOF+++

usage: $PROG expr

where 'expr' is the expression whose value is to be calculated.
(It can consist of one or more words.)

In the result, the number of decimal digits after the decimal
point is given by the the 'sc' environment variable if it's
defined, or the 'CALC_SCALE' environment variable if it's
defined: otherwise it defaults to ${DEFAULT_SCALE}. So for
example, both of the commands

    sc=8 $PROG 355 / 113
    CALC_SCALE=8 $PROG 355 / 113

output 3.14159292 instead of just 3.14.

+++EOF+++
    exit 1
fi

# If our basename is of the form n=, nn= or nnn=, where each 'n' is any
# digit, then unless overridden by setting the 'sc' environment variable or
# the 'sc' or 'CALC_SCALE' environment variables on the command line the
# number of decimal digits will be the number 'n', 'nn' or 'nnn'.
#echo "PROG=$PROG"
case "$PROG" in
    [[:digit:]]=)
        #echo "matched one digit"
        CALC_SCALE="${PROG:0:1}"
        ;;
    [[:digit:]][[:digit:]]=)
        CALC_SCALE="${PROG:0:2}"
        ;;
    [[:digit:]][[:digit:]][[:digit:]]=)
        CALC_SCALE="${PROG:0:3}"
        ;;
esac
#[ -n "$CALC_SCALE" ] && echo "Initial CALC_SCALE=${CALC_SCALE}"
declare -i SCALE="${sc:-${CALC_SCALE:-$DEFAULT_SCALE}}"

# Calculate pi to the number of digits we'll need: we don't use too many
# since too many decimal digits will increase the number of decimal digits
# in the final answer.
#
# Note: we could do this with the value of 'e' too, except then 'e' and
# 'e(1)' (aka 'exp(1)') would have different values.
#
# FUTURE: round the final value of PI rather instead of truncating it.
PI="$(echo "scale=$((SCALE+2)); 4*a(1)" | bc -l)"
PI="${PI:0: -2}"  # space required
#echo "PI=$PI"

# The scale/number of decimal places can be overridden using either
# 'CALC_SCALE' or 'sc': the latter is quicker when overriding it for one
# command while the former is probably more suited to setting it more
# permanently.
#
# The 'sed' command allows us to use the standard names for some common
# mathematical functions and constants in place of bc's 1-letter names for
# them. It's probably not a good idea to keep adding more expressions to the
# command since they can easily interact badly with each other. As it is if
# we put the expression for 'sin' before the one for 'cos' then 'cosin(...)'
# would get converted to 'cos(...)' (and then to 'c(...)'), which isn't a
# huge deal but does effectively define a function that we didn't really
# intend to (and don't particularly want to). And not all interactions will
# be as benign, or as easily remedied.
#
# (Also note that it's crucial that the 'sed' command precede the 'tr'
# command so that the latter doesn't convert the 'x' in 'exp(...)' into '*'.)
echo "$*" | sed -e "s_pi_${PI}_g" \
    -e 's_cos(_c(_g' -e 's_sin(_s(_g' -e 's_atan(_a(_g' \
    -e 's_e$_e(1)_g' -e 's_e\([^(]\)_e(1)\1_g' \
    -e 's_ln(_l(_g' -e 's_exp(_e(_g' | \
    tr 'x' '*' | sed "s_^_scale=$SCALE; _" | bc -l
